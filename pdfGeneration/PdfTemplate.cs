// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace pdfGeneration
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\pdfGenerator\pdfGenerator\pdfGeneration\PdfTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class PdfTemplate : PdfTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\n<p>&nbsp;</p>\r\n<table style=\"width: 733px;\" border=\"1\">\r\n<tbody>\r\n<tr style=\"" +
                    "height: 93px;\">\r\n<td style=\"width: 195px; height: 269px;\" rowspan=\"2\">\r\n<p><stro" +
                    "ng>D depot / <em>D</em> </strong><strong><em>D&eacute;p&ocirc;t</em></strong></p" +
                    ">\r\n<p>&lt;Delivery Depot name&gt;</p>\r\n<p>&lt; address &ndash; Road&gt;</p>\r\n<p>" +
                    "&lt;Del Depot address&gt; &nbsp;</p>\r\n<p>&lt;Postcode, Town&gt;</p>\r\n<p>&lt;Coun" +
                    "try&gt;</p>\r\n<p>(: &lt;(+33) 111 555 666&gt;</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Comp" +
                    "any#/ <em>Compagnie #</em>: </strong></p>\r\n<p><strong>&lt;</strong>222333444555 " +
                    "66&gt;</p>\r\n<p><strong>VAT #: </strong>&lt;FR 11&nbsp;222&nbsp;333 444&gt;</p>\r\n" +
                    "</td>\r\n<td style=\"width: 326px; height: 93px;\" colspan=\"6\">\r\n<p>&nbsp;<strong>C " +
                    "Hub: </strong>FRH001C<strong>&nbsp;&nbsp;&nbsp; D Hub: </strong>FRH001C</p>\r\n<p>" +
                    "<strong>Booking /</strong> <strong><em>R&eacute;servation</em></strong><strong> " +
                    ":&nbsp; </strong>&lt;dd/mm/yyyy HH:MM&gt;</p>\r\n</td>\r\n<td style=\"width: 190px; h" +
                    "eight: 93px;\" colspan=\"3\">\r\n<p><strong>Service / <em>Un service</em>: </strong><" +
                    "/p>\r\n<p><strong>C - </strong>&lt;Premium&gt;</p>\r\n<p><strong>D</strong> - &lt;Ec" +
                    "onomy&gt;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 176px;\">\r\n<td style=\"width: 275p" +
                    "x; height: 176px;\" colspan=\"5\">\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>&nbs" +
                    "p;</strong></p>\r\n<p><strong>Consignment # / <em>Consignation #</em></strong>:</p" +
                    ">\r\n<p><strong>&lt;UKFR10008165</strong><strong>&gt;</strong></p>\r\n</td>\r\n<td sty" +
                    "le=\"width: 241px; height: 176px;\" colspan=\"4\">\r\n<p><strong>Pallet Type / <em>Typ" +
                    "e de palette: </em></strong>&lt;EURO&gt;</p>\r\n<p><strong># of Pallets / <em># de" +
                    " palettes:</em> </strong>&lt;4&gt;</p>\r\n<p><strong>Gross weight/<em>Poids brut <" +
                    "/em>(kg): </strong>&lt;2400&gt;</p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>" +
                    "&nbsp;</strong></p>\r\n<p><strong>&nbsp;</strong></p>\r\n</td>\r\n</tr>\r\n<tr style=\"he" +
                    "ight: 264px;\">\r\n<td style=\"width: 195px; height: 264px;\">\r\n<p><strong>O Depot / " +
                    "<em>O D&eacute;p&ocirc;t</em>:</strong></p>\r\n<p>&lt;name&gt;</p>\r\n<p>&lt;address" +
                    "&gt;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>&lt;Postcode&gt;</p>\r\n<p>&lt;Town&gt;</p>\r\n" +
                    "<p>&lt;Country&gt;</p>\r\n<p>(:&lt; (+37) 101 525 692&gt;</p>\r\n<p>&nbsp;</p>\r\n<p><" +
                    "strong>Customer ref #&nbsp;/ <em>R&eacute;f&eacute;rence client #</em>: </strong" +
                    "></p>\r\n<p><strong>&lt;</strong>999999&gt;</p>\r\n</td>\r\n<td style=\"width: 275px; h" +
                    "eight: 264px;\" colspan=\"5\">\r\n<p><strong>Collection details&nbsp;/ <em>D&eacute;t" +
                    "ails de la collection</em>:</strong></p>\r\n<p>&lt;name&gt;</p>\r\n<p>&lt;address&gt" +
                    ";</p>\r\n<p>&lt;Postcode&gt;</p>\r\n<p>&lt;Town&gt;</p>\r\n<p>&lt;Country&gt;</p>\r\n<p>" +
                    "(:&lt; (+37) 101 525 692&gt;</p>\r\n<p><strong>Open from / <em>Ouvrir &agrave; par" +
                    "tir</em> :</strong></p>\r\n<p>&lt;08&nbsp;: 00&gt; - &lt;18&nbsp;: 00&gt;</p>\r\n</t" +
                    "d>\r\n<td style=\"width: 241px; height: 264px;\" colspan=\"4\">\r\n<p><strong>Customer /" +
                    " <em>Client</em>:</strong></p>\r\n<p>&lt;name&gt;</p>\r\n<p>&lt;address&gt;&nbsp;&nb" +
                    "sp;&nbsp;&nbsp;</p>\r\n<p>&lt;Postcode&gt;</p>\r\n<p>&lt;Town&gt;</p>\r\n<p>&lt;Countr" +
                    "y&gt;</p>\r\n<p>(:&lt; (+42) 208 577 923&gt;</p>\r\n<p><strong>Open from / <em>Ouvri" +
                    "r &agrave; partir</em> :</strong></p>\r\n<p>&lt;00&nbsp;: 00&gt; - &lt;00&nbsp;: 0" +
                    "0&gt;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 35px;\">\r\n<td style=\"width: 195px; he" +
                    "ight: 35px;\">\r\n<p><strong>O Depot&nbsp;</strong><strong>/ <em>O D&eacute;p&ocirc" +
                    ";t</em></strong><strong>: &lt;</strong>FRD001&gt;</p>\r\n</td>\r\n<td style=\"width: " +
                    "275px; height: 35px;\" colspan=\"5\">\r\n<p><strong>C Depot&nbsp;</strong><strong>/ <" +
                    "em>C D&eacute;p&ocirc;t</em></strong><strong>: &lt;</strong>FRD001&gt;</p>\r\n</td" +
                    ">\r\n<td style=\"width: 241px; height: 35px;\" colspan=\"4\">\r\n<p><strong>D Depot&nbsp" +
                    ";</strong><strong>/ <em>D D&eacute;p&ocirc;t</em></strong><strong>: &lt;</strong" +
                    ">FRD003&gt;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"height: 107px;\">\r\n<td style=\"width: 19" +
                    "5px; height: 214px;\" rowspan=\"2\">\r\n<p><strong>Description of goods</strong></p>\r" +
                    "\n<p><strong>/ <em>Description des biens</em>:</strong></p>\r\n<p>&lt;Dry goods&gt;" +
                    "</p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>&nbsp;</strong></p>\r\n</td>\r\n<td" +
                    " style=\"width: 275px; height: 107px;\" colspan=\"5\">\r\n<p>&nbsp;&nbsp;&nbsp; &nbsp;" +
                    "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</" +
                    "p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</td>\r\n<td style=\"width: 241px; height: 107px;" +
                    "\" colspan=\"4\">\r\n<p><strong>Insurance </strong></p>\r\n<p><strong>/ <em>Assurance:<" +
                    "/em></strong></p>\r\n<p>&lt;CMR&gt;</p>\r\n<p>&nbsp;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"h" +
                    "eight: 107px;\">\r\n<td style=\"width: 104px; height: 107px;\">\r\n<p><strong>Pallet #<" +
                    "/strong></p>\r\n<p><strong>/ Palette #</strong></p>\r\n</td>\r\n<td style=\"width: 50px" +
                    "; height: 107px;\">\r\n<p><strong>Size / Taille</strong></p>\r\n<p><span style=\"text-" +
                    "decoration: line-through;\">&nbsp;</span></p>\r\n</td>\r\n<td style=\"width: 46px; hei" +
                    "ght: 107px;\">\r\n<p><strong>LQ</strong></p>\r\n<p><strong>(kg)</strong></p>\r\n</td>\r\n" +
                    "<td style=\"width: 57px; height: 107px;\" colspan=\"2\">\r\n<p><strong>Height</strong>" +
                    "</p>\r\n<p><strong>/<em>la taille</em></strong></p>\r\n<p><strong>(m)</strong></p>\r\n" +
                    "</td>\r\n<td style=\"width: 85px; height: 107px;\" colspan=\"2\">\r\n<p><strong>Length</" +
                    "strong></p>\r\n<p><strong><em>/Longueur</em></strong><strong><br /> (m)</strong></" +
                    "p>\r\n</td>\r\n<td style=\"width: 74px; height: 107px;\">\r\n<p><strong>Width</strong></" +
                    "p>\r\n<p><strong>/<em>Largeur</em><br /> (m)</strong></p>\r\n</td>\r\n<td style=\"width" +
                    ": 70px; height: 107px;\">\r\n<p><strong>Weight </strong></p>\r\n<p><strong>/<em>Poids" +
                    "</em></strong></p>\r\n<p><strong>(kg)</strong></p>\r\n<p>&nbsp;</p>\r\n</td>\r\n</tr>\r\n<" +
                    "tr style=\"height: 371px;\">\r\n<td style=\"width: 195px; height: 371px;\">\r\n<p><stron" +
                    "g>Special instructions </strong></p>\r\n<p><strong>/ <em>Instructions sp&eacute;ci" +
                    "ales</em>:</strong></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>Collection /" +
                    " <em>Collection</em>:</strong></p>\r\n<p>&lt;Use side entrance&gt;</p>\r\n<p>&nbsp;<" +
                    "/p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>&nbsp;</strong></p>\r\n<p><strong>" +
                    "&nbsp;</strong></p>\r\n<p><strong>Delivery / <em>Livraison</em>:</strong></p>\r\n<p>" +
                    "&lt;Use front entrance&gt;</p>\r\n</td>\r\n<td style=\"width: 104px; height: 371px;\">" +
                    "\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873" +
                    "&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>00" +
                    "00912873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</s" +
                    "trong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong" +
                    ">&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p" +
                    "><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;" +
                    "</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</strong>000091" +
                    "2873&gt;</p>\r\n<p><strong>&lt;</strong>0000912873&gt;</p>\r\n<p><strong>&lt;</stron" +
                    "g>0000912873&gt;</p>\r\n</td>\r\n<td style=\"width: 50px; height: 371px;\">\r\n<p>MF</p>" +
                    "\r\n</td>\r\n<td style=\"width: 46px; height: 371px;\">\r\n<p>&lt;0.5&gt;</p>\r\n</td>\r\n<t" +
                    "d style=\"width: 57px; height: 371px;\" colspan=\"2\">\r\n<p>&lt;0.5&gt;</p>\r\n</td>\r\n<" +
                    "td style=\"width: 85px; height: 371px;\" colspan=\"2\">\r\n<p>&lt;0.5&gt;</p>\r\n</td>\r\n" +
                    "<td style=\"width: 74px; height: 371px;\">\r\n<p>&lt;0.5&gt;</p>\r\n</td>\r\n<td style=\"" +
                    "width: 70px; height: 371px;\">\r\n<p>&lt;1000&gt;</p>\r\n</td>\r\n</tr>\r\n<tr style=\"hei" +
                    "ght: 83px;\">\r\n<td style=\"width: 195px; height: 83px;\">\r\n<p><strong>Sender&rsquo;" +
                    "s stamp </strong></p>\r\n<p><strong>/ <em>Timbre de l\'exp&eacute;diteur</em></stro" +
                    "ng></p>\r\n<p><strong>&nbsp;</strong></p>\r\n</td>\r\n<td style=\"width: 249px; height:" +
                    " 83px;\" colspan=\"4\">\r\n<p><strong>Carrier&rsquo;s signature &amp; stamp </strong>" +
                    "</p>\r\n<p><strong>/ <em>Signature et timbre du transporteur</em></strong></p>\r\n</" +
                    "td>\r\n<td style=\"width: 267px; height: 83px;\" colspan=\"5\">\r\n<p><strong>Recipient&" +
                    "rsquo;s signature &amp; stamp </strong></p>\r\n<p><strong>/ <em>Signature et tampo" +
                    "n du destinataire</em> </strong></p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h1>&nbs" +
                    "p;</h1>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class PdfTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
